<style>
  .tt_controls_clinical_notes_optional #space { display:inline; }

  .tt_controls_cd4_count #char {
	display: none;
  }

  .tt_controls_cd4_percent #char {
	display: none;
  }

  .tt_controls_lymphocyte_count #char {
	display: none;
  }

  .tt_controls_cd4_count #qwerty{ display: none; }

  .tt_controls_cd4_count #equals{ display: inline; }

  .tt_controls_cd4_count #lessthan, .tt_controls_cd4_count #greaterthan {
    position: absolute;
    right: 65%;
  }

  .tt_controls_cd4_count #greaterthan {
    position: absolute;
    right: 65%;
    top: 5px;
  }

  .tt_controls_cd4_count #lessthan {
    top: 145px;
  }

</style>
<%= javascript_include_tag "prototype" %>
<%= stylesheet_link_tag "cohort" %>
<script src="/javascripts/jquery-1.3.2.min.js" type="text/javascript"></script>
<script type="text/javascript">
<% firstPositiveHivTestType = @confirmatory_hiv_test_type %>
  var tt_cancel_destination = "/patients/show/<%= @patient.patient_id -%>";
  var age = <%= @patient_bean.age -%>;
  var ageInMonths = <%= @patient_bean.age_in_months -%>;
  var firstPositiveHivTestType = "<%= @confirmatory_hiv_test_type -%>";
  var cd4_count_numeric, cd4_count_estimate, cd4_count_modifier;
  var selected_stage_conditions = {};
  var retrospective_entry = <%= @retrospective %>


  var formatted;
  var theForm;
  var outcomes;
  var age = '<%= @patient_bean.age %>'; var who_stage_i = []; var who_stage_ii = []; var who_stage_iii = []; var who_stage_iv = [];
  var who_stage_peds_i = []; var who_stage_peds_ii = []; var who_stage_peds_iii = []; var who_stage_peds_iv = [];
  var who_stage_adults_i = []; var who_stage_adults_ii = []; var who_stage_adults_iii = []; var who_stage_adults_iv = [];
<%
who_stage_i = @who_stage_i - @who_stage_peds_i - @who_stage_adults_i
who_stage_ii = @who_stage_ii - @who_stage_peds_ii - @who_stage_adults_ii
who_stage_iii = @who_stage_iii - @who_stage_peds_iii - @who_stage_adults_iii
who_stage_iv = @who_stage_iv - @who_stage_peds_iv - @who_stage_adults_iv
%>
  var stage_4 = [];
<%  @who_stage_iv.each { |stage| %>
	stage_4.push('<%=  stage[0] %>')
<%  } %>

  var stage_3 = [];
<%  @who_stage_iii.each { |stage| %>
	stage_3.push('<%=  stage[0] %>')
<%  } %>
  var stage_2 = [];
<%  @who_stage_ii.each { |stage| %>
	stage_2.push('<%=  stage[0] %>')
<%  } %>

  var stage_1 = [];
<%  @who_stage_i.each { |stage| %>
	stage_1.push('<%=  stage[0] %>')
<%  } %>
<%  who_stage_i.each { |stage| %>
	who_stage_i.push('<%=  stage[0] %>')
<%  } %>
<%  who_stage_ii.each { |stage| %>
	who_stage_ii.push('<%=  stage[0] %>')
<%  } %>
<%  who_stage_iii.each { |stage| %>
	who_stage_iii.push('<%=  stage[0] %>')
<%  } %>
<%  who_stage_iv.each { |stage| %>
	who_stage_iv.push('<%=  stage[0] %>')
<%  } %>

<%  @who_stage_adults_i.each { |stage| %>
	who_stage_adults_i.push('<%=  stage[0] %>')
<%  } %>
<%  @who_stage_adults_ii.each { |stage| %>
	who_stage_adults_ii.push('<%=  stage[0] %>')
<%  } %>
<%  @who_stage_adults_iii.each { |stage| %>
	who_stage_adults_iii.push('<%=  stage[0] %>')
<%  } %>
<%  @who_stage_adults_iv.each { |stage| %>
	who_stage_adults_iv.push('<%=  stage[0] %>')
<%  } %>

<%  @who_stage_peds_i.each { |stage| %>
	who_stage_peds_i.push('<%=  stage[0] %>')
<%  } %>
<%  @who_stage_peds_ii.each { |stage| %>
	who_stage_peds_ii.push('<%=  stage[0] %>')
<%  } %>
<%  @who_stage_peds_iii.each { |stage| %>
	who_stage_peds_iii.push('<%=  stage[0] %>')
<%  } %>
<%  @who_stage_peds_iv.each { |stage| %>
	who_stage_peds_iv.push('<%=  stage[0] %>')
<%  } %>
  jQuery(document).ready(function($) {
	$('#finishButton').click(function() {
	  document.forms["staging"].submit();
	})
	$('#btnCancel').click(function() {
	  window.location = "/patients/show/<%=  @patient.id%>"
	})
  })
  function resetPad() {
    curr_page = tstCurrentPage - 1
    buttons = document.getElementsByClassName("keyboardButton");
    for(i = 0; i < buttons.length ; i++) {
	  buttons[i].disabled = false;
    }
    $("clearButton").setAttribute("onmousedown","clearInput();");
    $("backButton").setAttribute("onmousedown",";gotoPage(" + curr_page + ", null, true);");
    $("nextButton").setAttribute("onmousedown","gotoNextPage();");
  }
  function resetKeyPad() {
    buttons = document.getElementsByClassName("keyboardButton");
    for(i = 0; i < buttons.length ; i++) {
      if (buttons[i].id == "equals" || buttons[i].id == "greaterthan" || buttons[i].id == "lessthan") {
        buttons[i].disabled = true;
      }else{
        buttons[i].disabled = false;
      }
    }
  }

  function updateCD4CountKeyPad() {
    curr_page = tstCurrentPage - 1
    buttons = document.getElementsByClassName("keyboardButton");
    $("clearButton").setAttribute("onmousedown","clearInput();updateCD4CountKeyPad();");
    $("backButton").setAttribute("onmousedown",";gotoPage(" + curr_page + ", null, true);resetPad();");
    $("nextButton").setAttribute("onmousedown","gotoNextPage();resetPad();");

    for(i = 0; i < buttons.length ; i++) {
      if (buttons[i].id == "equals" || buttons[i].id == "greaterthan" || buttons[i].id == "lessthan") {
        buttons[i].disabled = false;
        if( buttons[i].id == "equals"){
          buttons[i].setAttribute("onmousedown","press('=');resetKeyPad();");
        }else if( buttons[i].id == "lessthan") {
          buttons[i].setAttribute("onmousedown","press('<');resetKeyPad();");
        }else if( buttons[i].id == "greaterthan") {
          buttons[i].setAttribute("onmousedown","press('>');resetKeyPad();");
        }
      }else{
        buttons[i].disabled = true;
      }
    }
  }

  function updateCD4Count() {
    var cd4_available = $('new_cd4_count_available').value == 'YES';
    var cd4_count = cd4_available ? $('cd4_count').value : null;
	var cd4_count_modifier = '';

    try {
      cd4_count_numeric = parseInt(cd4_count.match(/[0-9](.*)/i)[0]);
    } catch(e) { cd4_count_numeric = null; }

    if (cd4_count_numeric == null || ''+cd4_count_numeric == 'NaN') {
      try {
        var matches = cd4_count.match(/^(\<|\>)([0-9\.]+)$/)
        cd4_count_modifier = matches[1];
        cd4_count_estimate = parseInt(matches[2]);
        cd4_count_numeric = cd4_count_estimate;
        if (cd4_count_modifier == '<') cd4_count_numeric -= 1;
        if (cd4_count_modifier == '>') cd4_count_numeric += 1;
      } catch(e) {
        cd4_count_modifier = null;
        cd4_count_estimate = null;
        cd4_count_numeric = null;
      }
    } else {
	  var matches = cd4_count.match(/^(=|\<|\>)([0-9\.]+)$/)
	  cd4_count_modifier = matches[1];
    }

    if (cd4_count_numeric == null || ''+cd4_count_numeric == 'NaN') {
      $('cd4_count_less_than_250').value = "UNKNOWN";
      $('cd4_count_less_than_350').value = "UNKNOWN";
    } else {
	  if(cd4_count_numeric <= 250 && cd4_count_modifier != ">") {
		$('cd4_count_less_than_250').value = "YES";
	  } else {
		$('cd4_count_less_than_250').value = "NO";
	  }

	  if(cd4_count_numeric <= 350 && cd4_count_modifier != ">") {
		$('cd4_count_less_than_350').value = "YES";
	  } else {
		$('cd4_count_less_than_350').value = "NO";
	  }
    }
  }

  function updateCD4Percent() {
	var cd4_percent_available = $('new_cd4_percent_available').value == 'YES';
	var cd4_percent = cd4_percent_available ? $('cd4_percent').value : null;
	var cd4_percent_numeric, cd4_percent_estimate, cd4_percent_modifier;

	try { cd4_percent_numeric = parseInt(cd4_percent); } catch(e) { cd4_percent_numeric = null; }

	if (cd4_percent_numeric == null || ''+cd4_percent_numeric == 'NaN') {
	  try {
		var matches = cd4_percent.match(/^(\<|\>)([0-9\.]+)$/)
		cd4_percent_modifier = matches[1];
		cd4_percent_estimate = parseInt(matches[2]);
		cd4_percent_numeric = cd4_percent_estimate;
		if (cd4_percent_modifier == '<') cd4_percent_numeric -= 1;
		if (cd4_percent_modifier == '>') cd4_percent_numeric += 1;
	  } catch(e) {
		cd4_percent_modifier = null;
		cd4_percent_estimate = null;
		cd4_percent_numeric = null;
	  }
	}

	if (cd4_percent_numeric == null || ''+cd4_percent_numeric == 'NaN') {
	  $('cd4_percent_less_than_25').value = "UNKNOWN";
	} else {
	  $('cd4_percent_less_than_25').value = (cd4_percent_numeric < 25) ? "YES" : "NO";
	}
  }

  // These are here in case you are looking up hard coded concept names
  // WHO STAGE I ADULT
  // WHO STAGE II ADULT
  // WHO STAGE III ADULT
  // WHO STAGE IV ADULT
  // WHO STAGE I PEDS
  // WHO STAGE II PEDS
  // WHO STAGE III PEDS
  // WHO STAGE IV PEDS
  function whoStageConcept(stage, adultOrPeds) {
	try {
	  selected_stage_three_conditions = selected_stage_conditions[3].split(';');
	} catch(e) {
	  selected_stage_three_conditions = null;
	}

	if (selected_stage_three_conditions) {
	  conditions_found = 0;
	  severe_weight_loss = false;

	  for (i = 0 ; i < selected_stage_three_conditions.length ; i++) {
		if (selected_stage_three_conditions[i] == 'Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained') {
		  severe_weight_loss = true;
		} else if (selected_stage_three_conditions[i] == 'Diarrhoea, chronic (>1 month) unexplained') {
		  conditions_found++;
		} else if (selected_stage_three_conditions[i] == 'Fever, persistent unexplained, intermittent or constant, >1 month') {
		  conditions_found++;
		}
	  }

	  if (conditions_found > 0 && severe_weight_loss) {
<%	if !@retrospective %>
		  selected_stage_conditions[4] = 'HIV wasting syndrome (severe weight loss + persistent fever or severe weight loss + chronic diarrhoea)';
		  $('calculated_who_stage_4').value = selected_stage_conditions[4];
<%	end	%>

		return  "WHO STAGE " + numeral(4) + " " + adultOrPeds;
	  }
	}

	return "WHO STAGE " + numeral(stage) + " " + adultOrPeds;
  }

  function numeral(num) {
	switch(num) {
	  case 1:
		return "I";
	  case 2:
		return "II";
	  case 3:
		return "III";
	  case 4:
		return "IV";
	}
  }


  function checkPregnancyAndAge() {
    var patientAge = "<%= @patient_bean.age.to_i %>";
    var pregnancyStatus = $('pregnant').value;

    if ((patientAge >= 55) && pregnancyStatus == "YES") {
	  return "true";
    } else {
      return "false";
    }
  }

  function checkBreastfeedingAndAge() {
    var patientAge = "<%= @patient_bean.age.to_i %>";
    var breastfeedingStatus = $('breast_feeding').value;

    if ((patientAge >= 55) && breastfeedingStatus == "YES") {
	  return "true";
    } else {
      return "false";
    }
  }

  function selectedValues(element) {
	selected_values = [];
	for (i = 0 ; i < element.options.length ; i++) {
	  if (element.options[i].selected){
		selected_values.push(element.options[i].value);
	  }
	}

	try {
	  return selected_values.join(',');
	} catch(e) {
	  return null;
	}
  }

  function showPresumed() {
	try {
	  age_in_months = parseInt("<%=@patient_bean.age_in_months%>");
	  if (age_in_months < 12) {
		return true;
	  }
	} catch(e) {
	  return false;
	}

	return false;
  }

  function transferInPatient() {
	transfer_in = "<%= @patient_is_transfer_in == true %>";
	if (transfer_in == 'true') {
	  return true;
	}

	return false;
  }

  function setSelectedStageConditions(stage) {
	selected_stage_conditions[stage] = $("touchscreenInput" + tstCurrentPage).value;
	/*
	if (stage == 3) {
<%  if @patient.person.observations.to_s.include?('Pulmonary tuberculosis' || 'Smear +ve')%>
								if ($("touchscreenInput" + tstCurrentPage).value == "") {
								  selected_stage_conditions[stage] = "Pulmonary tuberculosis (current)"
								}
								else{
								  selected_stage_conditions[stage] += ';Pulmonary tuberculosis (current)'
								}
<%end%>
	}
	if (stage == 4) {
<% if @patient.person.observations.to_s.include?('Extrapulmonary tuberculosis (EPTB)') %>
								if ($("touchscreenInput" + tstCurrentPage).value == "") {
								  selected_stage_conditions[stage] = "Extrapulmonary tuberculosis (EPTB)"
								}
								else{
								  selected_stage_conditions[stage] += ';Extrapulmonary tuberculosis (EPTB)'
								}
<%end%>
	}
	 */
  }

  function showConditions() {
	try {
	  cond = selected_stage_conditions[1].split(';');

	}catch(e) {
	  cond = []
	}

	for (i = 0 ; i < cond.length ; i++) {
	  if(cond[i] == 'Asymptomatic HIV infection' || cond[i] == 'Asymptomatic') {
		return false;
	  }
	}
	return true;
  }
  function checkPtb(){
<% if  @patient.person.observations.to_s.include?('Pulmonary tuberculosis' || 'Smear +ve') %>
	  options = document.getElementsByTagName('li');
	  for (i = 0 ; i < options.length ; i++) {
		if (options[i].getAttribute('tstvalue') == "Pulmonary tuberculosis (current)") {
  <% tb_hiv_exclusions = [['Extrapulmonary tuberculosis (EPTB)', 'Extrapulmonary tuberculosis (EPTB)']]
  @who_stage_iv = @who_stage_iv - tb_hiv_exclusions

%>
		  updateTouchscreenInputForSelect($("optionValue" + i));
		  return
		}
	  }
<% end  %>
  }

  function checkPastTb(){
<% if @patient.person.observations.to_s.include?('Ever received TB treatment:  Yes') %>
	  options = document.getElementsByTagName('li');
	  for (i = 0 ; i < options.length ; i++) {
		if (options[i].getAttribute('tstvalue') == "Tuberculosis (PTB or EPTB) within the last 2 years") {
		  updateTouchscreenInputForSelect($("optionValue" + i));
		  return
		}
	  }
<%  end %>
  }

  function checkEptb(){
<% if  @patient.person.observations.to_s.include?('Extrapulmonary tuberculosis (EPTB)') %>
	  options = document.getElementsByTagName('li');
	  for (i = 0 ; i < options.length ; i++) {
		if (options[i].getAttribute('tstvalue') == "Extrapulmonary tuberculosis (EPTB)") {
  <% tb_hiv_exclusions = [['Pulmonary tuberculosis (current)', 'Pulmonary tuberculosis (current)']]
  @who_stage_iii = @who_stage_iii - tb_hiv_exclusions
%>
		  updateTouchscreenInputForSelect($("optionValue" + i));
		}
	  }
<%  end %>
  }
  function selectedConditions() {
	html = "<ul><h3>Selected stage defining conditions</h3>"
	for (x = 0; x < selected.length; x++) {
	  html += '<li>' + selected[x] + '</li>'
	}
	if (html == "<ul><h3>Selected stage defining conditions</h3>") return '';
	return html + '</ul>';
  }

  function clearConditions(){
	selected = [];
  }

  function summary() {

	updateWhoStage();
	updateReasonForArtEligibility();
	var conditions = selectedConditions();
	var display = "<div><span class='title'>WHO Stage: " + $('who_stage').value + "</span></div>";
	display += "<div><span class='title'>Reason for ART Eligibility: " + $('reason_for_art_eligibility').value + "</span></div>";

	$('inputFrame'+tstCurrentPage).innerHTML = '<div id="summary">' + display + '</div>' ;
	$("clearButton").style.display = "none";

	if (conditions.length > 0) {
	  $('inputFrame'+tstCurrentPage).innerHTML += '<div id="selected_stage_conditions"><hr /><br />' + conditions + '</div>' ;
	}
  }
  var whoStage = null;


  function updateWhoStage() {
	// Everyone is supposed to be HIV positive so start them at 1
	var x; var i;
	var who_stage = "";
	whoStage = 1;
	var adultOrPeds = (age > 14) ? "ADULT" : "PEDS";
	for (x= 0; x < stage_4.length; x++){
	  for (i =0; i < selected.length; i++){
		if (stage_4[x] == selected[i]) {
		  who_stage = "WHO STAGE IV " + adultOrPeds;
		}
	  }
	}
	if (who_stage == ""){
	  for (x= 0; x < stage_3.length; x++){
		for (i =0; i < selected.length; i++){
		  if (stage_3[x] == selected[i]) {
			who_stage = "WHO STAGE III " + adultOrPeds;
		  }
		}
	  }
	}
	if (who_stage == ""){
	  for (x= 0; x < stage_2.length; x++){
		for (i =0; i < selected.length; i++){
		  if (stage_2[x] == selected[i]) {
			who_stage = "WHO STAGE II " + adultOrPeds;
		  }
		}
	  }
	}
	if (who_stage == ""){
	  for (x= 0; x < stage_1.length; x++){
		for (i =0; i < selected.length; i++){
		  if (stage_1[x] == selected[i]) {
			who_stage = "WHO STAGE I " + adultOrPeds;
		  }
		}
	  }
	}
	if (ageInMonths < 12 && firstPositiveHivTestType == "HIV rapid test") {
	  $('who_stage').value = "PRESUMED SEVERE HIV";
	} else {
	  $('who_stage').value = who_stage;
	}
  }

  function updateReasonForArtEligibility() {
	var reasonForArtEligibility = "NONE";
	// Lymphocyte thresholds for ages 0-15
	var lymphocyteThresholds = [4000, 4000, 4000, 3000, 3000, 2500, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000];

	var lymphocyteCountAvailable = false;

	if ($('new_lymphocyte_count_available')) {
	  lymphocyteCountAvailable = $('new_lymphocyte_count_available').value == 'YES';
	}

	var lymphocyteCount = lymphocyteCountAvailable ? $('lymphocyte_count').value : null;
	var lymphocyteCountNumeric = null;

	try { lymphocyteCountNumeric = parseInt(lymphocyteCount); } catch(e) { }

	if (age > 14) {
	  if (whoStage >= 3) {
		reasonForArtEligibility = whoStageConcept(whoStage, "ADULT");
	  } else if($('cd4_count_less_than_350').value == "YES") {
		reasonForArtEligibility = "CD4 COUNT LESS THAN OR EQUAL TO 350";
	  } else {
		if ($('pregnant') && $('pregnant').value == "YES" && $('cd4_count_less_than_350').value == "YES") {
		  reasonForArtEligibility = "CD4 COUNT LESS THAN OR EQUAL TO 350";
		} else if (whoStage == 1 && lymphocyteCount < 1200 && lymphocyteCount != null) {
		  reasonForArtEligibility = "LYMPHOCYTE COUNT BELOW THRESHOLD WITH WHO STAGE 1";
		} else if (whoStage == 2 && lymphocyteCount < 1200 && lymphocyteCount != null) {
		  reasonForArtEligibility = "LYMPHOCYTE COUNT BELOW THRESHOLD WITH WHO STAGE 2";
		} else if ($('pregnant') && $('pregnant').value == "YES") {
		  reasonForArtEligibility = "PATIENT PREGNANT";
		} else if ($('breast_feeding') && $('breast_feeding').value == "YES") {
		  reasonForArtEligibility = "BREASTFEEDING";
		}
	  }
	} else {
	  var presumedSevereHivConditions = "";
	  if ($('presumed_severe_hiv_conditions')) presumedSevereHivConditions = selectedValues($('presumed_severe_hiv_conditions'));
	  var presumedSevereHiv = false;

	  if (firstPositiveHivTestType == "HIV rapid test") {
		if (
		presumedSevereHivConditions.indexOf("Pneumocystis pneumonia") > -1 ||
		  presumedSevereHivConditions.indexOf("Candidiasis of oseophagus, trachea and bronchi or lungs") > -1 ||
		  presumedSevereHivConditions.indexOf("Cryptococcal meningitis") > -1 ||
		  presumedSevereHivConditions.indexOf("Severe unexplained wasting or malnutrition not responding to treatment (weight-for-height/ -age <70% or MUAC <11cm or oedema)") > -1 ||
		  presumedSevereHivConditions.indexOf("Toxoplasmosis of the brain (from age 1 month)") > -1) {
		  presumedSevereHiv = true;
		} else if (
		((presumedSevereHivConditions.indexOf("Oral candidiasis") > -1) && (presumedSevereHivConditions.indexOf("Severe sepsis") > -1)) ||
		  ((presumedSevereHivConditions.indexOf("Oral candidiasis") > -1) && (presumedSevereHivConditions.indexOf("Severe pneumonia") > -1)) ||
		  ((presumedSevereHivConditions.indexOf("Severe pneumonia") > -1) && (presumedSevereHivConditions.indexOf("Severe sepsis") > -1))) {
		  presumedSevereHiv = true;
		}
	  }

	  try {
		if (ageInMonths < 12 && firstPositiveHivTestType == "HIV rapid test" && presumedSevereHiv) {
		  reasonForArtEligibility = "PRESUMED SEVERE HIV";
		} else if (whoStage >= 3) {
		  reasonForArtEligibility = whoStageConcept(whoStage, "PEDS");
		} else if (ageInMonths < 12 && firstPositiveHivTestType == "HIV DNA POLYMERASE CHAIN REACTION") {
		  reasonForArtEligibility = "HIV DNA POLYMERASE CHAIN REACTION";
		} else if (ageInMonths < 24) {
		  reasonForArtEligibility = "HIV infected";
		} else if (cd4_count_numeric <= 750 && (ageInMonths >= 24 && ageInMonths < 56) && (whoStage) <= 2) {
		  reasonForArtEligibility = "CD4 COUNT LESS THAN OR EQUAL TO 750";
		} else if ($('cd4_count_less_than_350') && $('cd4_count_less_than_350').value == "YES" && (whoStage) <= 2) {
		  reasonForArtEligibility = "CD4 COUNT LESS THAN OR EQUAL TO 350";
		} else if (lymphocyteCount && (lymphocyteCount < lymphocyteThresholds[age]) && lymphocyteCount != null) {
		  reasonForArtEligibility = "LYMPHOCYTE COUNT BELOW THRESHOLD WITH WHO STAGE 2";
		} else if ($('pregnant') && $('pregnant').value == "YES") {
		  reasonForArtEligibility = "PATIENT PREGNANT";
		} else if ($('breast_feeding') && $('breast_feeding').value == "YES") {
		  reasonForArtEligibility = "BREASTFEEDING";
		}
	  } catch (e) {}
	}

	$('reason_for_art_eligibility').value = reasonForArtEligibility;
  }

  function addStage(outcome){
	outcomes = outcome.id
	theForm = document.getElementById("staging");
	try {
	  removable = document.getElementById(outcome.id);
	  document.getElementById(removable).parentNode.removeChild(removable);
	}
	catch(e){

	}
	if (outcome.checked == 1){
	  var dates = new Date();
	  formatted = outcome.id.replace(/ /g,"_");
	  appendObs("observations[][concept_name]", outcomes);
	  appendObs("observations[][value_coded_or_text]", "YES")
	  appendObs("observations[][patient_id]", '<%= @patient.id %>')
	  appendObs("observations[][obs_datetime]", dates);
	  selected.push(outcomes);
	}
  }
  var selected = [];
  function appendObs(obs, value){
	var newOption = document.createElement("input");
	newOption.type = "hidden";
	newOption.id = formatted.toLowerCase();
	newOption.name = obs;
	newOption.value = value;
	theForm.appendChild(newOption);
  }
  function checkConditions(){
	alert(selected)
  }

  function loadConditions() {
	var display = "<div class='scrollTableContainer'><table><tr><th width='50%'>Adults and Children</th>";
	if (age >= 15 ){
	  display += "<th>Adults only (15 years or Older)</th>";
	}
	if (age < 15 ){
	  display += "<th>Children only (below 15 years)</th>";
	}

	//Stage 1 conditions
	display +=	"</tr><tr  valign='top' class='general'><td width='50%'><table><tr valign='top'><td>1</td>";
	
	for (var i = 0 ; i < who_stage_i.length ; i++) {
	  display += "<td><input type='checkbox' id='"+ who_stage_i[i] + "' name='"+ who_stage_i[i] + "' value='"+ who_stage_i[i] + "' onclick='addStage(this)'>";
	  display += "<td>"+ who_stage_i[i] + "</td>";
	}
	display += "</tr></table></td><td><table><tr><td></td></tr></table></td></tr>";

	//Stage 2 Conditions
	display +=	"<tr valign='top'  class='blue'> <td width='50%'><table> <tr valign='top'><td>2</td><td><table>";

	for (var i = 0 ; i < who_stage_ii.length ; i++) {
	  display += "<tr><td><input type='checkbox' id='"+ who_stage_ii[i] + "' name='"+ who_stage_ii[i] + "' value='"+ who_stage_ii[i] + "' onclick='addStage(this)'>";
	  display += "<td>"+ who_stage_ii[i] + "</td></tr>";
	}

	display += "</table></td></tr></table></td><td><table>";

	if (age >= 15 ){
	  for (var i = 0 ; i < who_stage_adults_ii.length ; i++) {
		display += "<tr><td><input type='checkbox' id='"+ who_stage_adults_ii[i] + "' name='"+ who_stage_adults_ii[i] + "' value='"+ who_stage_adults_ii[i] + "' onclick='addStage(this)'>";
		display += "<td>"+ who_stage_adults_ii[i] + "</td></tr>";
	  }
	}
	else{
	  for (var i = 0 ; i < who_stage_peds_ii.length ; i++) {
		display += "<tr><td><input type='checkbox' id='"+ who_stage_peds_ii[i] + "' name='"+ who_stage_peds_ii[i] + "' value='"+ who_stage_peds_ii[i] + "' onclick='addStage(this)'>";
		display += "<td>"+ who_stage_peds_ii[i] + "</td></tr>";
	  }
	}
	display += "</table></td></tr>";
	//Stage 3 conditions
	display +=	"<tr valign='top' class='general'> <td width='50%'><table> <tr valign='top'><td>3</td><td><table>";

	for (var i = 0 ; i < who_stage_iii.length ; i++) {
	  display += "<tr><td><input type='checkbox' id='"+ who_stage_iii[i] + "' name='"+ who_stage_iii[i] + "' value='"+ who_stage_iii[i] + "' onclick='addStage(this)'>";
	  display += "<td>"+ who_stage_iii[i] + "</td></tr>";
	}
	display += "</table></td></tr></table></td><td><table>";
	if (age >= 15 ){
	  for (var i = 0 ; i < who_stage_adults_iii.length ; i++) {
		display += "<tr><td><input type='checkbox' id='"+ who_stage_adults_iii[i] + "' name='"+ who_stage_adults_iii[i] + "' value='"+ who_stage_adults_iii[i] + "' onclick='addStage(this)'>";
		display += "<td>"+ who_stage_adults_iii[i] + "</td></tr>";
	  }
	}
	else{
	  for (var i = 0 ; i < who_stage_peds_iii.length ; i++) {
		display += "<tr><td><input type='checkbox' id='"+ who_stage_peds_iii[i] + "' name='"+ who_stage_peds_iii[i] + "' value='"+ who_stage_peds_iii[i] + "' onclick='addStage(this)'>";
		display += "<td>"+ who_stage_peds_iii[i] + "</td></tr>";
	  }
	}
	display += "</table></td></tr>";
	//Stage 4 conditions
	display +=	"<tr valign='top' class='blue'> <td width='50%'><table> <tr valign='top'><td>4</td><td><table>";

	for (var i = 0 ; i < who_stage_iv.length ; i++) {
	  display += "<tr><td><input type='checkbox' id='"+ who_stage_iv[i] + "' name='"+ who_stage_iv[i] + "' value='"+ who_stage_iv[i] + "' onclick='addStage(this)'>";
	  display += "<td>"+ who_stage_iv[i] + "</td></tr>";
	}
	display += "</table></td></tr></table></td><td><table>";
	if (age >= 15 ){
	  for (var i = 0 ; i < who_stage_adults_iv.length ; i++) {
		display += "<tr><td><input type='checkbox' id='"+ who_stage_adults_iv[i] + "' name='"+ who_stage_adults_iv[i] + "' value='"+ who_stage_adults_iv[i] + "' onclick='addStage(this)'>";
		display += "<td>"+ who_stage_adults_iv[i] + "</td></tr>";
	  }
	}
	else{
	  for (var i = 0 ; i < who_stage_peds_iv.length ; i++) {
		display += "<tr><td><input type='checkbox' id='"+ who_stage_peds_iv[i] + "' name='"+ who_stage_peds_iv[i] + "' value='"+ who_stage_peds_iv[i] + "' onclick='addStage(this)'>";
		display += "<td>"+ who_stage_peds_iv[i] + "</td></tr>";
	  }
	}
	display += "</table></td></tr></table></td></tr></table></di>";

	$('inputFrame'+tstCurrentPage).innerHTML = '<div id="loadconditions">' + display + '</div>' ;
  }
</script>
<style>
  div.scrollTableContainer {
	height: 600px ! important;
	width:98% ! important;
  }
  .buttonsDiv {
	width:954px ! important;
  }
  #content {
	width:975px ! important;
  }
  .blue {
	border: 2px solid black;
	background-color: white;
  }
  .general {
	border: 2px solid black;
	background-color: lightgrey;
  }
  .big{
	width: 150px ! important;
  }
  td{
	padding: 5px;
	font-size: 15px;
  }
  th, b {
	font-size: 18px;
	background-color: white ! important;
  }

  input[type='checkbox'] {
	/* Double-sized Checkboxes */
	-ms-transform: scale(2); /* IE */
	-moz-transform: scale(2); /* FF */
	-webkit-transform: scale(2); /* Safari and Chrome */
	-o-transform: scale(2); /* Opera */
	padding: 10px;
	width: 30px;
	height: 30px;
  }
  .inputPage{
	width: 970px ! important;
  }
  .inputFrameClass{
	width: 930px ! important;
  }
  #tt_page_summary{
	width: 900px ! important;
  }
  .NoKeyboard, .NoControls {
	height: 700px ! important;
  }
</style>

<%#= raise @who_stage_i.first[0].to_yaml %>
<form id='staging' action="/encounters/create" method='post' name="staging">
  <%= hidden_field_tag "encounter[encounter_type_name]", "HIV STAGING" %>
  <%= hidden_field_tag "encounter[patient_id]", @patient.id %>
  <%= hidden_field_tag "encounter[encounter_datetime]", DateTime.now() %>
  <%= hidden_field_tag "encounter[provider_id]", current_user.user_id %>
  <%= hidden_field_tag "staging_conditions", "YES"%>

  <% if @patient_bean.age_in_months < 12 and @confirmatory_hiv_test_type == 'HIV rapid test' %>
	<%= touch_select_tag "PRESUMED SEVERE HIV CRITERIA PRESENT", @patient, concept_set_options('PRESUMED SEVERE HIV CRITERIA IN INFANTS'),
	  {	:id => "presumed_severe_hiv_conditions",
	  :multiple => true,
	  :optional => true,
	  :helpText => "Presumed severe HIV criteria (infants only)",
	  :tt_pageStyleClass => "NoKeyboard NoInput small"  } %>
  <% else %>

	<% if @patient_bean.sex == 'Female' and  @patient_bean.age > 14
	  obs_date = session[:datetime].to_date rescue Date.today
	  patient_pregnant = Observation.find(:first,:conditions =>["concept_id = ? AND person_id = ? AND DATE(obs_datetime) = ?",
		  ConceptName.find_by_name('IS PATIENT PREGNANT?').concept_id,
		  @patient.id,obs_date]) %>

	  <% if @patient_is_transfer_in && (@patient_transfer_in_date == session[:datetime])%>
		<% if patient_pregnant.blank? %>
		  <%= touch_yes_no_unknown_tag "IS PATIENT PREGNANT?", @patient, nil,
			{	:id => "pregnant" ,
			:optional => false ,
			:validationCode => "checkPregnancyAndAge() == 'false'",
			:validationMessage => "Patient (#{@patient_bean.name}) is #{@patient_bean.age} years old. Is she pregnant?",
			:helpText => "Patient pregnant at initiation?" } %>
		<% end %>

		<%= touch_yes_no_unknown_tag "IS PATIENT BREAST FEEDING?", @patient, nil,
		  {	:id => "breast_feeding" ,
		  :optional => false ,
		  :condition => '$("pregnant").value == "NO"',
		  :validationCode => "checkBreastfeedingAndAge() == 'false'",
		  :validationMessage => "Patient (#{@patient_bean.name}) is #{@patient_bean.age} years old. Is she breastfeeding?",
		  :helpText => "Patient breast feeding at initiation?" } %>
	  <% else %>
		<% if patient_pregnant.blank? %>
		  <%= touch_yes_no_unknown_tag "IS PATIENT PREGNANT?", @patient, nil,
			{	:id => "pregnant" ,
			:optional => false ,
			:validationCode => "checkPregnancyAndAge() == 'false'",
			:validationMessage => "Patient (#{@patient_bean.name}) is #{@patient_bean.age} years old. Is she pregnant?",
			:helpText => "Is patient pregnant?" } %>
		<% end %>

		<%= touch_yes_no_unknown_tag "IS PATIENT BREAST FEEDING?", @patient, nil,
		  {	:id => "breast_feeding" ,
		  :optional => false ,
		  :condition => '$("pregnant").value == "NO"',
		  :validationCode => "checkBreastfeedingAndAge() == 'false'",
		  :validationMessage => "Patient (#{@patient_bean.name}) is #{@patient_bean.age} years old. Is she breastfeeding?",
		  :helpText => "Is patient breast feeding?" } %>

	  <% end %>
	<% end %>
  <% end %>

  <label for='loadconditions'>WHO clinical staging for children and adults (Normal Staging)</label>
  <%= text_field_tag :loadconditions, nil, { :tt_onUnLoad => "checkConditions()", :tt_onLoad => "loadConditions();__$('keyboard').style.display = 'none';", :tt_pageStyleClass => "NoControls" } %>
  <label for='new_cd4_count_available'>Recent CD4 count results available?</label>
  <%= select_tag "new_cd4_count_available", options_for_select([['Yes','YES'],['No','NO']]), :id => 'new_cd4_count_available', :tt_pageStyleClass => 'NoKeyboard' %>

  <%= touch_date_tag "CD4 COUNT DATETIME", @patient, nil,
	{:id => "cd4_count_date",
	:condition => '$("new_cd4_count_available").value == "YES"',
	:helpText => "CD4 Count Date",
	:max => "#{session[:datetime].to_date rescue Date.today}"} %>

  <%= touch_cd4_count_numeric_tag "CD4 COUNT", @patient, nil,
	{:id => "cd4_count",
	:condition => '$("new_cd4_count_available").value == "YES"',
	:helpText => "CD4 Count",
	:max => 1000 ,
	:min => 1 ,
	:tt_onLoad => "updateCD4CountKeyPad();",
	:tt_onUnLoad => "updateCD4Count();"} %>

  <%= touch_hidden_tag "CD4 COUNT LESS THAN OR EQUAL TO 250", @patient, "", :id => "cd4_count_less_than_250" %>
  <%= touch_hidden_tag "CD4 COUNT LESS THAN OR EQUAL TO 350", @patient, "", :id => "cd4_count_less_than_350" %>

  <% if @patient_bean.age <= 14 %>

	<label for='new_cd4_percent_available'>New CD4 percent available?</label>
	<%= select_tag "new_cd4_percent_available", options_for_select([['Yes','YES'],['No','NO']]), :id => 'new_cd4_percent_available', :tt_pageStyleClass => 'NoKeyboard' %>

	<%= touch_date_tag "CD4 PERCENT DATETIME", @patient, (Time.now - 1.month).year,
	  {:id => "cd4_percent_date",
	  :condition => '$("new_cd4_percent_available").value == "YES"',
	  :helpText => "CD4 Percent Date",
	  :max => "#{session[:datetime].to_date rescue Date.today}"} %>

	<%= touch_numeric_tag "CD4 PERCENT", @patient, nil,
	  {:id => "cd4_percent",
	  :condition => '$("new_cd4_percent_available").value == "YES"',
	  :helpText => "CD4 Percent",
	  :tt_onUnLoad => 'updateCD4Percent()'} %>

	<%= touch_hidden_tag "CD4 PERCENT LESS THAN 25", @patient, "", :id => "cd4_percent_less_than_25" %>

  <% else %>
	<%= hidden_field_tag "new_cd4_percent_available", "" %>
  <% end %>

  <label for='new_lymphocyte_count_available'>New Lymphocyte count available?</label>
  <%= select_tag "new_lymphocyte_count_available", options_for_select([['Yes','YES'],['No','NO']]), :id => 'new_lymphocyte_count_available', :tt_pageStyleClass => 'NoKeyboard' %>

  <%= touch_date_tag "LYMPHOCYTE COUNT DATETIME", @patient, nil,
	{:id => "lymphocyte_count_date",
	:condition => '$("new_lymphocyte_count_available").value == "YES"',
	:helpText => "Lymphocyte Count Date",
	:max => "#{session[:datetime].to_date rescue Date.today}"} %>

  <%= touch_numeric_tag "LYMPHOCYTE COUNT", @patient, nil,
	{:id => "lymphocyte_count",
	:condition => '$("new_lymphocyte_count_available").value == "YES"',
	:helpText => "Lymphocyte Count"} %>

  <%= touch_location_tag "CD4 PERCENT LOCATION", @patient, nil,
	{	:id => "cd4_percent_location",
	:condition => '$("new_cd4_percent_available").value == "YES" || $("new_lymphocyte_count_available").value == "YES" || ($("new_cd4_count_available").value == "YES" && transferInPatient() == false)',
	:helpText => "CD4 or Lymphocyte count location"} %>

  <%= touch_text_area_tag("CLINICAL NOTES CONSTRUCT", @patient, nil,
	{	:optional => true,:helpText => "Clinical notes (optional)"}, time=DateTime.now()) %>

  <%= touch_hidden_tag "WHO STAGES CRITERIA PRESENT", @patient, "", :id => "calculated_who_stage_4" %>
  <%= touch_hidden_tag "WHO STAGE", @patient, "", :id => "who_stage" %>
  <%= touch_hidden_tag "REASON FOR ART ELIGIBILITY", @patient, "", :id => "reason_for_art_eligibility" %>

  <label for='summary'>Summary</label>
  <%= text_field_tag :summary, nil, {:tt_onUnLoad => "clearConditions();", :tt_onLoad => "summary();clearConditions();__$('keyboard').style.display = 'none';", :optional => "true", :tt_pageStyleClass => "NoControls" } %>

  <% session_date = session[:datetime].to_date rescue nil

  if session_date %>
	<p><label for="filter_provider">Staff who provided the information (Provider)</label></br>
	<%= text_field "filter" , 'provider', :helpText => 'Staff who provided the information (Provider)', :ajaxURL => '/user/username?username=' %></p>
  <% else %>
	<%= hidden_field_tag "filter[provider]", nil %>
  <%end%>

</form>

